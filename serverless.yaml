service: connect-slow-lambda

provider:
  name: aws
  region: ${opt:region, 'ap-southeast-2'}
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  profile: aws-josh

package:
  individually: true 

functions:

  jobstatus:
    handler: lambda/JobStatus.handler
    name: '${self:provider.stage}-${self:service}-jobstatus'
    description: 'Called by Connect to check the status of a job'
    role: !GetAtt LambdaRole.Arn
    package:
      include:
        - 'lambda/JobStatus.js'
      exclude:
        - '**'
        - '!node_modules/**'
      excludeDevDependencies: true
    memorySize: 512
    timeout: 7
    environment:
      REGION: !Ref 'AWS::Region'
      DYNAMO_TABLE: !Ref 'JobLodgementDBTable'
      STAGE: '${self:provider.stage}'

  jobsubmitter:
    handler: lambda/JobSubmitter.handler
    name: '${self:provider.stage}-${self:service}-jobsubmitter'
    description: 'Called by Connect to submit a job for processing to SQS'
    role: !GetAtt LambdaRole.Arn
    package:
      include:
        - 'lambda/JobSubmitter.js'
      exclude:
        - '**'
        - '!node_modules/**'
      excludeDevDependencies: true
    memorySize: 512
    timeout: 7
    environment:
      REGION: !Ref 'AWS::Region'
      DYNAMO_TABLE: !Ref 'JobLodgementDBTable'
      SQS_QUEUE: !Ref JobLodgementSQSQueue
      STAGE: '${self:provider.stage}'

  joblodger:
    handler: lambda/JobLodger.handler
    name: '${self:provider.stage}-${self:service}-joblodger'
    description: 'Lodges jobs from SQS updating DynamoDB with job status'
    role: !GetAtt LambdaRole.Arn
    events:
      - sqs:
          arn: !GetAtt JobLodgementSQSQueue.Arn
          batchSize: 1
          maximumRetryAttempts: 1
    package:
      include:
        - 'lambda/JobLodger.js'
      exclude:
        - '**'
        - '!node_modules/**'
      excludeDevDependencies: true
    memorySize: 512
    timeout: 120
    environment:
      REGION: !Ref 'AWS::Region'
      DYNAMO_TABLE: !Ref 'JobLodgementDBTable'
      STAGE: '${self:provider.stage}'

resources:
  Description: 'Demonstration of calling long running Lambda functions from Connect'
  Resources:
    LambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Join [ '-', [ '${self:provider.stage}', !Ref 'AWS::StackName', !Ref 'AWS::Region', 'role' ]]
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: 'Allow'
              Principal: 
                Service: 
                  - 'lambda.amazonaws.com'
              Action: 
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref LambdaPolicy 

    LambdaPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        ManagedPolicyName: !Join [ '-', [ '${self:provider.stage}', !Ref 'AWS::StackName', !Ref 'AWS::Region', 'policy' ]]
        Description: 'Managed policy for lambda execution'
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: 
                - !Join [ ':', [ 'arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group:/aws/lambda/*:*:*' ] ]
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: 
                - !GetAtt JobLodgementDBTable.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: 
                - !GetAtt JobLodgementSQSQueue.Arn

    JobLodgementSQSQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: '${self:provider.stage}-job-lodgement'
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 199
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt JobLodgementSQSDeadLetterQueue.Arn
          maxReceiveCount: 5

    JobLodgementSQSDeadLetterQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: '${self:provider.stage}-job-lodgement-deadletter'
        MessageRetentionPeriod: 1209600

    JobLodgementDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: '${self:provider.stage}-job-lodgement'
        AttributeDefinitions:
          - AttributeName: ContactId
            AttributeType: S
        KeySchema:
          - AttributeName: ContactId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ExpiryTime
          Enabled: true

